/* SQLParser.java */
/* Generated By:JavaCC: Do not edit this line. SQLParser.java */

import java.io.*;
public class SQLParser implements SQLParserConstants {
    public static void main(String[] args) throws ParseException, IOException {
        for (String arg : args) {
            Reader reader = new StringReader(arg);
            SQLParser parser = new SQLParser(reader);
            parser.sqlQuery();
            System.out.println("Parsing completed successfully.");
        }
    }

// 定义 SQL 查询的语法规则
  final public void sqlQuery() throws ParseException {
    jj_consume_token(SELECT);
    columnListOrAsterisk();
    jj_consume_token(FROM);
    tableName();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHERE:{
      whereClause();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(0);
System.out.println("Parsed SQL Query");
}

// 列表规则或 *
  final public void columnListOrAsterisk() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASTERISK:{
      jj_consume_token(ASTERISK);
System.out.println("Column: *");
      break;
      }
    case IDENTIFIER:{
      columnList();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// 列表规则
  final public void columnList() throws ParseException {
    columnName();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 11:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      jj_consume_token(11);
      columnName();
    }
}

// 单个列名规则
  final public void columnName() throws ParseException {
    jj_consume_token(IDENTIFIER);
// 没有定义变量的场景，默认匹配到的单词为token
        Token t = token;
        System.out.println("=======column=======");
        System.out.println("Column: " + t.image
                           + ", Line: " + t.beginLine + ", end Line\uff1a" + t.endLine
                           + ", beginColumn: " + t.beginColumn + ", endColumn\uff1a" + t.endColumn);
        System.out.println("==============");
}

// 表名规则
  final public void tableName() throws ParseException {
    jj_consume_token(IDENTIFIER);
// 没有定义变量的场景，默认匹配到的单词为token
        Token t = token;
        System.out.println("=======table=======");
        System.out.println("Table: " + t.image
                           + ", Line: " + t.beginLine + ", end Line\uff1a" + t.endLine
                           + ", beginColumn: " + t.beginColumn + ", endColumn\uff1a" + t.endColumn);
        System.out.println("=======table=======");
}

// WHERE 子句规则
  final public void whereClause() throws ParseException {
    jj_consume_token(WHERE);
    condition();
}

// 条件规则
  final public void condition() throws ParseException {// 如果某个方法中涉及到多个变量获取打印情况，则可以使用如下变量定义
   Token identifierToken, numberToken;
    // 读取值方式为： 变量名=<token> 匹配相应字符
        identifierToken = jj_consume_token(IDENTIFIER);
    jj_consume_token(12);
    numberToken = jj_consume_token(NUMBER);
System.out.println("=======condition=======");
        System.out.println("Condition: " + identifierToken.image + " = " + numberToken.image);
        System.out.println("identifierToken: " + identifierToken.image
                           + ", Line: " + identifierToken.beginLine + ", end Line\uff1a" + identifierToken.endLine
                           + ", beginColumn: " + identifierToken.beginColumn + ", endColumn\uff1a" + identifierToken.endColumn);
        System.out.println("numberToken: " + numberToken.image
                           + ", Line: " + numberToken.beginLine + ", end Line\uff1a" + numberToken.endLine
                           + ", beginColumn: " + numberToken.beginColumn + ", endColumn\uff1a" + numberToken.endColumn);
        System.out.println("=======condition=======");
}

  /** Generated Token Manager. */
  public SQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x80,0x500,0x800,};
	}

  /** Constructor with InputStream. */
  public SQLParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SQLParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new SQLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SQLParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new SQLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new SQLParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SQLParser(SQLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SQLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[13];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 3; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 13; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
