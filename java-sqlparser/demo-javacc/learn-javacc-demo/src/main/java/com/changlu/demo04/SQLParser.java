package com.changlu.demo04;/* SQLParser.java */
/* Generated By:JavaCC: Do not edit this line. SQLParser.java */
import java.io.*;
import java.util.ArrayList;
import java.util.List;

// 位置信息类
class TokenPosition {
    public final int startLine;
    public final int startColumn;
    public final int endLine;
    public final int endColumn;

    public TokenPosition(int startLine, int startColumn, int endLine, int endColumn) {
        this.startLine = startLine;
        this.startColumn = startColumn;
        this.endLine = endLine;
        this.endColumn = endColumn;
    }

    public TokenPosition(Token token) {
        this(token.beginLine, token.beginColumn, token.endLine, token.endColumn);
    }

    @Override
    public String toString() {
        return "[" + startLine + ":" + startColumn + "-" + endLine + ":" + endColumn + "]";
    }
}

// 语法树节点接口
interface ASTNode {
    void accept(ASTVisitor visitor);
    TokenPosition getPosition();
}

// SELECT语句节点
class SelectStatement implements ASTNode {
    public final TokenPosition position;
    public final List<Column> columns;
    public final Table table;
    public final Condition whereCondition;

    public SelectStatement(TokenPosition position, List<Column> columns, Table table, Condition whereCondition) {
        this.position = position;
        this.columns = columns;
        this.table = table;
        this.whereCondition = whereCondition;
    }

    @Override
    public void accept(ASTVisitor visitor) {
        visitor.visit(this);
    }

    @Override
    public TokenPosition getPosition() {
        return position;
    }
}

// 列节点
class Column implements ASTNode {
    public final TokenPosition position;
    public final String name;

    public Column(TokenPosition position, String name) {
        this.position = position;
        this.name = name;
    }

    @Override
    public void accept(ASTVisitor visitor) {
        visitor.visit(this);
    }

    @Override
    public TokenPosition getPosition() {
        return position;
    }
}

// 表节点
class Table implements ASTNode {
    public final TokenPosition position;
    public final String name;

    public Table(TokenPosition position, String name) {
        this.position = position;
        this.name = name;
    }

    @Override
    public void accept(ASTVisitor visitor) {
        visitor.visit(this);
    }

    @Override
    public TokenPosition getPosition() {
        return position;
    }
}

// WHERE条件节点
class Condition implements ASTNode {
    public final TokenPosition position;
    public final Column column;
    public final String value;
    public final TokenPosition valuePosition;

    public Condition(TokenPosition position, Column column, String value, TokenPosition valuePosition) {
        this.position = position;
        this.column = column;
        this.value = value;
        this.valuePosition = valuePosition;
    }

    @Override
    public void accept(ASTVisitor visitor) {
        visitor.visit(this);
    }

    @Override
    public TokenPosition getPosition() {
        return position;
    }
}

// 访问者接口
interface ASTVisitor {
    void visit(SelectStatement select);
    void visit(Column column);
    void visit(Table table);
    void visit(Condition condition);
}

// 示例访问者实现
class PrintVisitor implements ASTVisitor {
    private int indent = 0;

    private String getIndent() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < indent; i++) {
            sb.append("  ");
        }
        return sb.toString();
    }

    private String formatPosition(TokenPosition pos) {
        return " " + pos;
    }

    @Override
    public void visit(SelectStatement select) {
        System.out.println(getIndent() + "SELECT" + formatPosition(select.position));
        indent++;
        for (Column col : select.columns) {
            col.accept(this);
        }
        select.table.accept(this);
        if (select.whereCondition != null) {
            select.whereCondition.accept(this);
        }
        indent--;
    }

    @Override
    public void visit(Column column) {
        System.out.println(getIndent() + "COLUMN: " + column.name + formatPosition(column.position));
    }

    @Override
    public void visit(Table table) {
        System.out.println(getIndent() + "FROM " + table.name + formatPosition(table.position));
    }

    @Override
    public void visit(Condition condition) {
        System.out.println(getIndent() + "WHERE " +
            condition.column.name + " = " + condition.value +
            formatPosition(condition.position) +
            " (value at" + formatPosition(condition.valuePosition) + ")");
    }
}

public class SQLParser implements SQLParserConstants {
    private SelectStatement selectStatement;

    public SelectStatement getAST() {
        return selectStatement;
    }

    public static void main(String[] args) throws ParseException, IOException {
        String sql = args.length > 0 ? args[0] : "select id, name from users where id = 1";
        Reader reader = new StringReader(sql);
        SQLParser parser = new SQLParser(reader);

        try {
            parser.sqlQuery();
            System.out.println("Parsing completed successfully.");

            SelectStatement ast = parser.getAST();
            System.out.println("\nAbstract Syntax Tree with Positions:");
            ast.accept(new PrintVisitor());

        } catch (ParseException e) {
            System.err.println("SQL parse error: " + e.getMessage());
        }
    }

// 语法规则
  final public void sqlQuery() throws ParseException {
      Token selectToken;
    List<Column> columns = new ArrayList<>();
    Table table;
    Condition whereCondition = null;
    TokenPosition selectPosition;
    selectToken = jj_consume_token(SELECT);
    columns = columnListOrAsterisk(selectToken);
    jj_consume_token(FROM);
    // Explicitly consume FROM token
        table = tableName();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHERE:{
      whereCondition = whereClause();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(0);
selectPosition = new TokenPosition(
            selectToken.beginLine, selectToken.beginColumn,
            token.endLine, token.endColumn
        );
        selectStatement = new SelectStatement(selectPosition, columns, table, whereCondition);
}

  final public List<Column> columnListOrAsterisk(Token selectToken) throws ParseException {List<Column> columns = new ArrayList<>();
    Token token;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASTERISK:{
      token = jj_consume_token(ASTERISK);
columns.add(new Column(new TokenPosition(token), "*"));
      break;
      }
    case IDENTIFIER:{
      columns = columnList();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return columns;}
    throw new Error("Missing return statement in function");
}

  final public List<Column> columnList() throws ParseException {List<Column> columns = new ArrayList<>();
    Column column;
    column = columnName();
columns.add(column);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 11:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      jj_consume_token(11);
      column = columnName();
columns.add(column);
    }
{if ("" != null) return columns;}
    throw new Error("Missing return statement in function");
}

  final public Column columnName() throws ParseException {
      Token t;
    t = jj_consume_token(IDENTIFIER);
{if ("" != null) return new Column(new TokenPosition(t), t.image);}
    throw new Error("Missing return statement in function");
}

  final public Table tableName() throws ParseException {
      Token t;
    t = jj_consume_token(IDENTIFIER);
{if ("" != null) return new Table(new TokenPosition(t), t.image);}
    throw new Error("Missing return statement in function");
}

  final public Condition whereClause() throws ParseException {
      Token whereToken;
    Condition condition;
    whereToken = jj_consume_token(WHERE);
    condition = condition();
{if ("" != null) return condition;}
    throw new Error("Missing return statement in function");
}

  final public Condition condition() throws ParseException {Column column;
    Token operator, valueToken;
    String value;
    column = columnName();
    operator = jj_consume_token(12);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      valueToken = jj_consume_token(NUMBER);
value = valueToken.image;
      break;
      }
    case IDENTIFIER:{
      valueToken = jj_consume_token(IDENTIFIER);
value = valueToken.image;
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Condition(
            new TokenPosition(
                column.getPosition().startLine,
                column.getPosition().startColumn,
                valueToken.endLine,
                valueToken.endColumn
            ),
            column,
            value,
            new TokenPosition(valueToken)
        );}
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public SQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x80,0x500,0x800,0x300,};
	}

  /** Constructor with InputStream. */
  public SQLParser(InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SQLParser(InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new SQLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SQLParser(Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new SQLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new SQLParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SQLParser(SQLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SQLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private List<int[]> jj_expentries = new ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[13];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 4; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 13; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
